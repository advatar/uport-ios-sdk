//
//  UportRegistry.swift
//
//  Generated by Bivrost at 1522453688.72512.
//

struct UportRegistry {

    struct Version: SolidityFunction {
        static let methodId = "54fd4d50"
        typealias Return = Solidity.UInt256
        typealias Arguments = Void

        static func encodeCall(arguments: Arguments) -> String {
            return "0x\(methodId)\(BaseEncoder.encode(arguments: arguments))"
        }

        static func decode(returnData: String) throws -> Return {
            let source = BaseDecoder.partition(returnData)
            // Decode Static Types & Locations for Dynamic Types
            let param0 = try Solidity.UInt256.decode(source: source)
            // Dynamic Types (if any)
            return param0
        }

        static func decode(argumentsData: String) throws -> Arguments {}
    }

    struct PreviousPublishedVersion: SolidityFunction {
        static let methodId = "6104464f"
        typealias Return = Solidity.Address
        typealias Arguments = Void

        static func encodeCall(arguments: Arguments) -> String {
            return "0x\(methodId)\(BaseEncoder.encode(arguments: arguments))"
        }

        static func decode(returnData: String) throws -> Return {
            let source = BaseDecoder.partition(returnData)
            // Decode Static Types & Locations for Dynamic Types
            let param0 = try Solidity.Address.decode(source: source)
            // Dynamic Types (if any)
            return param0
        }

        static func decode(argumentsData: String) throws -> Arguments {}
    }

    struct Get: SolidityFunction {
        static let methodId = "447885f0"
        typealias Return = Solidity.Bytes32
        typealias Arguments = (registrationIdentifier: Solidity.Bytes32, issuer: Solidity.Address, subject: Solidity.Address)

        static func encodeCall(arguments: Arguments) -> String {
            return "0x\(methodId)\(BaseEncoder.encode(arguments: arguments.registrationIdentifier, arguments.issuer, arguments.subject))"
        }

        static func decode(returnData: String) throws -> Return {
            let source = BaseDecoder.partition(returnData)
            // Decode Static Types & Locations for Dynamic Types
            let param0 = try Solidity.Bytes32.decode(source: source)
            // Dynamic Types (if any)
            return param0
        }

        static func decode(argumentsData: String) throws -> Arguments {
            let source = BaseDecoder.partition(argumentsData)
            // Decode Static Types & Locations for Dynamic Types
            let registrationIdentifier = try Solidity.Bytes32.decode(source: source)
            let issuer = try Solidity.Address.decode(source: source)
            let subject = try Solidity.Address.decode(source: source)
            // Dynamic Types (if any)
            return Arguments(registrationIdentifier: registrationIdentifier, issuer: issuer, subject: subject)
        }
    }

    struct Set: SolidityFunction {
        static let methodId = "d79d8e6c"
        typealias Return = Void
        typealias Arguments = (registrationIdentifier: Solidity.Bytes32, subject: Solidity.Address, value: Solidity.Bytes32)

        static func encodeCall(arguments: Arguments) -> String {
            return "0x\(methodId)\(BaseEncoder.encode(arguments: arguments.registrationIdentifier, arguments.subject, arguments.value))"
        }

        static func decode(returnData: String) throws -> Return {}

        static func decode(argumentsData: String) throws -> Arguments {
            let source = BaseDecoder.partition(argumentsData)
            // Decode Static Types & Locations for Dynamic Types
            let registrationIdentifier = try Solidity.Bytes32.decode(source: source)
            let subject = try Solidity.Address.decode(source: source)
            let value = try Solidity.Bytes32.decode(source: source)
            // Dynamic Types (if any)
            return Arguments(registrationIdentifier: registrationIdentifier, subject: subject, value: value)
        }
    }

    struct Registry: SolidityFunction {
        static let methodId = "81895b73"
        typealias Return = Solidity.Bytes32
        typealias Arguments = (param0: Solidity.Bytes32, param1: Solidity.Address, param2: Solidity.Address)

        static func encodeCall(arguments: Arguments) -> String {
            return "0x\(methodId)\(BaseEncoder.encode(arguments: arguments.param0, arguments.param1, arguments.param2))"
        }

        static func decode(returnData: String) throws -> Return {
            let source = BaseDecoder.partition(returnData)
            // Decode Static Types & Locations for Dynamic Types
            let param0 = try Solidity.Bytes32.decode(source: source)
            // Dynamic Types (if any)
            return param0
        }

        static func decode(argumentsData: String) throws -> Arguments {
            let source = BaseDecoder.partition(argumentsData)
            // Decode Static Types & Locations for Dynamic Types
            let param0 = try Solidity.Bytes32.decode(source: source)
            let param1 = try Solidity.Address.decode(source: source)
            let param2 = try Solidity.Address.decode(source: source)
            // Dynamic Types (if any)
            return Arguments(param0: param0, param1: param1, param2: param2)
        }
    }
}
